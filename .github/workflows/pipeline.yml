name: Deploy Workflow
on: deployment
jobs:
  debug:
    runs-on: self-hosted
    steps:
      - name: Mostra info ambiente
        run: |
          echo "USER: $(whoami)"
          echo "HOME: $HOME"
          hostname -I
          uname -a

      - name: Mostra kubeconfig
        run: |
          cat $HOME/.kube/config || echo "Kubeconfig non trovato"

      - name: Test connessione API server
        run: |
          grep server $HOME/.kube/config
          server_ip=$(grep server $HOME/.kube/config | awk -F/ '{print $3}' | cut -d: -f1)
          echo "Test curl verso API server $server_ip"
          curl -vk https://$server_ip:8443 || echo "Connessione fallita"
  deploy-ENVIRONMENT_NAME:
    name: Deploy to ENVIRONMENT_NAME environment
    if: ${{ github.event.deployment.environment }} == ENVIRONMENT_NAME
    concurrency: ENVIRONMENT_NAME
    permissions:
      deployments: write
      contents: read
    runs-on: self-hosted
    container: alpine/git:latest
    steps:
      - uses: actions/checkout@v4
      - name: Install kubectl
        run: |
          apk update
          apk add kubectl
      - name: Update deployment status (pending)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'pending'
          deployment-id: ${{ github.event.deployment.id }}
      - name: Deploy my app
        env:
          KUBE_NAMESPACE: ${{ github.event.deployment.payload.variables.KUBE_NAMESPACE }}
          DEPLOY_FOLDER: environments/${{ github.event.deployment.environment }} # Assumendo che il nome del tuo environment sia 'dev'
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }} # Il nuovo Secret Base64
        run: |
          # 1. Decodifica il Kubeconfig e salvalo
          # Questo crea il file /tmp/kubeconfig con l'URL corretto (127.0.0.1)
          echo "${KUBE_CONFIG_B64}" | base64 -d > /tmp/kubeconfig
          
          # 2. Imposta la variabile d'ambiente KUBECONFIG
          # Questo dice a kubectl di usare il file decodificato
          export KUBECONFIG=/tmp/kubeconfig
          # 3. Deployment dei file YAML
          echo "Starting deployment of files in ${DEPLOY_FOLDER}..."
          kubectl apply -f "${DEPLOY_FOLDER}"
          
          echo "Deployment completed."
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'failure'
          deployment-id: ${{ github.event.deployment.id }}
